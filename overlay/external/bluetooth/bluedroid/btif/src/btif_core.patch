diff --git a/external/bluetooth/bluedroid/btif/src/btif_core.c b/external/bluetooth/bluedroid/btif/src/btif_core.c
index 62339a9..65d06b7 100755
--- a/external/bluetooth/bluedroid/btif/src/btif_core.c
+++ b/external/bluetooth/bluedroid/btif/src/btif_core.c
@@ -779,7 +779,8 @@ static bt_status_t btif_disassociate_evt(void)
 *******************************************************************************/
 static void btif_dut_mode_cback( tBTM_VSC_CMPL *p )
 {
-    /* For now nothing to be done. */
+    BTIF_TRACE_DEBUG1("%s", __FUNCTION__);
+    HAL_CBACK(bt_hal_cbacks, dut_mode_recv_cb, p->opcode, p->p_param_buf, p->param_len);
 }
 
 /*******************************************************************************
@@ -823,10 +824,10 @@ bt_status_t btif_dut_mode_send(uint16_t opcode, uint8_t *buf, uint8_t len)
 {
     /* TODO: Check that opcode is a vendor command group */
     BTIF_TRACE_DEBUG1("%s", __FUNCTION__);
-    if (!btif_is_dut_mode()) {
+    /*if (!btif_is_dut_mode()) {
          BTIF_TRACE_ERROR0("Bluedroid HAL needs to be init with test_mode set to 1.");
          return BT_STATUS_FAIL;
-    }
+    }*/
     BTM_VendorSpecificCommand(opcode, len, buf, btif_dut_mode_cback);
     return BT_STATUS_SUCCESS;
 }
diff --git a/external/bluetooth/bluedroid/test/bluedroidtest/bluedroidtest.c b/external/bluetooth/bluedroid/test/bluedroidtest/bluedroidtest.c
index 130bc60..e9adfa2 100644
--- a/external/bluetooth/bluedroid/test/bluedroidtest/bluedroidtest.c
+++ b/external/bluetooth/bluedroid/test/bluedroidtest/bluedroidtest.c
@@ -471,7 +471,13 @@ static void adapter_state_changed(bt_state_t state)
 
 static void dut_mode_recv(uint16_t opcode, uint8_t *buf, uint8_t len)
 {
-    bdt_log("DUT MODE RECV : NOT IMPLEMENTED");
+    uint8_t evt_param_index;
+
+    printf("DUT MODE RECV: [Opcode = 0x%4X] [Param_len = %d] [Param = ", opcode, len);
+
+    for(evt_param_index=0; evt_param_index<len; evt_param_index++)
+	printf(" 0x%02X", buf[evt_param_index]);
+    printf("]\n");
 }
 
 static bt_callbacks_t bt_callbacks = {
@@ -538,6 +544,66 @@ void bdt_dut_mode_configure(char *p)
     check_return_status(status);
 }
 
+void bdt_dut_mode_send(char *p)
+{
+    uint16_t ogf = 0;
+    uint16_t ocf = 0;
+    char *tok_str;
+    uint16_t opcode;
+    uint8_t param[1024];
+    uint16_t opcode_field_count;
+    uint16_t param_index , param_len;
+
+    bdt_log("BT DUT MODE SEND");
+
+    param_len = 0;
+    param_index = 0;
+    opcode_field_count = 2;
+
+    if (!bt_enabled) {
+        bdt_log("Bluetooth must be enabled for test_mode to work.");
+        return;
+    }
+
+    tok_str = strtok (p," ");
+    while (tok_str != NULL) {
+        switch(opcode_field_count)
+        {
+            case 2:
+            ogf = strtol(tok_str, NULL, 16);
+            break;
+
+            case 1:
+            ocf = strtol(tok_str, NULL, 16);
+            break;
+
+            default:
+            param[param_index++] =  strtol(tok_str, NULL, 16);
+            break;
+        }
+        opcode_field_count--;
+        tok_str = strtok (NULL, " ");
+    }
+
+    param_len = param_index;
+    bdt_log("ogf = 0x%02X", ogf);
+    bdt_log("ocf = 0x%02X", ocf);
+
+    opcode = (ocf & 0x03ff)|(ogf << 10);
+
+    bdt_log("opcode = 0x%02X", opcode);
+    bdt_log("param_len = %d", param_len);
+
+    printf("params: ");
+    for(param_index=0; param_index<param_len; param_index++)
+        printf("0x%02X ", param[param_index]);
+    printf("\n");
+
+    status = sBtInterface->dut_mode_send(opcode, param, param_len);
+
+    check_return_status(status);
+}
+
 void bdt_cleanup(void)
 {
     bdt_log("CLEANUP");
@@ -595,6 +661,11 @@ void do_dut_mode_configure(char *p)
     bdt_dut_mode_configure(p);
 }
 
+void do_dut_mode_send(char *p)
+{
+    bdt_dut_mode_send(p);
+}
+
 void do_cleanup(char *p)
 {
     bdt_cleanup();
@@ -623,6 +694,7 @@ const t_cmd console_cmd_list[] =
     { "enable", do_enable, ":: enables bluetooth", 0 },
     { "disable", do_disable, ":: disables bluetooth", 0 },
     { "dut_mode_configure", do_dut_mode_configure, ":: DUT mode - 1 to enter,0 to exit", 0 },
+    { "dut_mode_send", do_dut_mode_send, ":: <ogf> <ocf> <parameters>", 0 },
 
     /* add here */
 
@@ -636,7 +708,7 @@ const t_cmd console_cmd_list[] =
 
 static void process_cmd(char *p, unsigned char is_job)
 {
-    char cmd[64];
+    char cmd[1024];
     int i = 0;
     char *p_saved = p;
 
@@ -664,7 +736,7 @@ static void process_cmd(char *p, unsigned char is_job)
 int main (int argc, char * argv[])
 {
     int opt;
-    char cmd[128];
+    char cmd[1024];
     int args_processed = 0;
     int pid = -1;
 
@@ -685,13 +757,13 @@ int main (int argc, char * argv[])
 
     while(!main_done)
     {
-        char line[128];
+        char line[1024];
 
         /* command prompt */
         printf( ">" );
         fflush(stdout);
 
-        fgets (line, 128, stdin);
+        fgets (line, 1024, stdin);
 
         if (line[0]!= '\0')
         {
@@ -699,7 +771,7 @@ int main (int argc, char * argv[])
             line[strlen(line)-1] = 0;
 
             process_cmd(line, 0);
-            memset(line, '\0', 128);
+            memset(line, '\0', 1024);
         }
     }
